#!/bin/bash
# Script for setting up a multi-region Roach Bank cluster using roachprod in either AWS or GCE.
# DO NOT EDIT THIS FILE

# Bootstrap phase
#############################

if [ -z "${CLUSTER}" ]; then
  fn_echo_warning "No \$CLUSTER id variable set!"
  export CLUSTER="your-cluster-id"
fi

fn_echo_header
{
	echo -e "${lightblue}Cluster id:\t\t${default}$CLUSTER"
	echo -e "${lightblue}Node count:\t\t${default}$nodes"
	echo -e "${lightblue}CRDB nodes:\t\t${default}$crdbnodes"
	echo -e "${lightblue}Client nodes:\t\t${default}$clientnodes"
	echo -e "${lightblue}CRDB version:\t\t${default}$releaseversion"
	echo -e "${lightblue}Cloud:\t\t${default}$cloud"
	echo -e "${lightblue}Machine types:\t\t${default}$machinetypes"
	echo -e "${lightblue}Zones:\t\t${default}$zones"
	echo -e "${lightblue}Dryrun mode:\t\t${default}$dryrun"
} | column -s $'\t' -t

if ! fn_prompt_yes_no "Continue?" Y; then
	exit 0
fi

# Start with cluster setup - headless from here on
#################################################

fn_echo_dots_nl "Creating cluster"

if [ "${cloud}" = "aws" ]; then
  fn_failcheck roachprod create $CLUSTER --clouds=aws --aws-machine-type-ssd=${machinetypes} --geo --local-ssd --nodes=${nodes} --aws-zones=${zones}
else
  fn_failcheck roachprod create $CLUSTER --clouds=gce --gce-machine-type=${machinetypes} --geo --local-ssd --nodes=${nodes} --gce-zones=${zones}
fi

fn_echo_ok_nl "Creating cluster"

#---------------------------------------------------------------
fn_echo_dots_nl "Stage binaries with $clientnodes"
fn_failcheck roachprod stage $CLUSTER release $releaseversion
fn_echo_ok_nl "Stage binaries with $clientnodes"

#---------------------------------------------------------------
fn_echo_dots_nl "Start CRDB nodes $crdbnodes"
fn_failcheck roachprod start $CLUSTER:$crdbnodes --sequential
fn_failcheck roachprod admin --open --ips $CLUSTER:1
fn_echo_ok_nl "Start CRDB nodes $crdbnodes"

#---------------------------------------------------------------
fn_echo_dots_nl "Installing haproxy"
fn_failcheck roachprod run ${CLUSTER}:$clientnodes 'sudo apt-get -qq update'
fn_failcheck roachprod run ${CLUSTER}:$clientnodes 'sudo apt-get -qq install -y haproxy'

if [ "${region}" ]; then
fn_failcheck roachprod run ${CLUSTER}:$client1 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region"
fn_failcheck roachprod run ${CLUSTER}:$client2 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region"
fn_failcheck roachprod run ${CLUSTER}:$client3 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region"
else
fn_failcheck roachprod run ${CLUSTER}:$client1 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region1"
fn_failcheck roachprod run ${CLUSTER}:$client2 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region2"
fn_failcheck roachprod run ${CLUSTER}:$client3 "./cockroach gen haproxy --insecure --host $(roachprod ip $CLUSTER:1 --external) --locality=region=$region3"
fi
fn_failcheck roachprod run ${CLUSTER}:$clientnodes 'nohup haproxy -f haproxy.cfg > /dev/null 2>&1 &'
fn_echo_ok_nl "Installing haproxy"

#---------------------------------------------------------------
fn_echo_dots_nl "Creating database"

fn_failcheck roachprod run $CLUSTER:1 <<EOF
./cockroach sql --insecure --host=`roachprod ip $CLUSTER:1` -e "CREATE DATABASE roach_bank;"
EOF

fn_echo_ok_nl "Creating database"

#---------------------------------------------------------------
fn_echo_dots_nl "Deploying JRE and apps"
fn_echo_info_nl "Installing JRE"
fn_failcheck roachprod run ${CLUSTER}:$clientnodes 'sudo apt-get -qq install -y openjdk-8-jre-headless'
fn_echo_info_nl "Uploading binary"
fn_failcheck roachprod put ${CLUSTER}:$clientnodes roach-bank.tar.gz
fn_echo_info_nl "Exploding binary"
fn_failcheck roachprod run ${CLUSTER}:$clientnodes 'tar xvf roach-bank.tar.gz'
fn_echo_ok_nl "Deploying JRE and apps"

#---------------------------------------------------------------

url1="http://$(roachprod ip $CLUSTER:$client1 --external):8090"
url2="http://$(roachprod ip $CLUSTER:$client2 --external):8090"
url3="http://$(roachprod ip $CLUSTER:$client3 --external):8090"

fn_echo_dots_nl "Starting first bank instance"
fn_failcheck roachprod run ${CLUSTER}:$client1 'nohup ./roach-bank-server.jar --roachbank.region=${region1} > /dev/null 2>&1 &'
fn_echo_dots_nl "Waiting for $url1"

until $(curl --output /dev/null --silent --head --fail $url1); do
    printf '.'
    sleep 5
done

fn_open_url $url1
fn_echo_ok_nl "Starting first bank instance"

#---------------------------------------------------------------
fn_echo_dots_nl "Starting second instance"
fn_failcheck roachprod run ${CLUSTER}:$client2 'nohup ./roach-bank-server.jar --roachbank.region=${region2} --spring.liquibase.enabled=false > /dev/null 2>&1 &'

fn_echo_dots_nl "Starting third instance"
fn_failcheck roachprod run ${CLUSTER}:$client3 'nohup ./roach-bank-server.jar --roachbank.region=${region3} --spring.liquibase.enabled=false > /dev/null 2>&1 &'

fn_echo_dots_nl "Waiting for $url2"

until $(curl --output /dev/null --silent --head --fail $url2); do
    printf '.'
    sleep 5
done
fn_open_url $url2

fn_echo_dots_nl "Waiting for $url3"

until $(curl --output /dev/null --silent --head --fail $url3); do
    printf '.'
    sleep 5
done

fn_open_url $url3
fn_echo_ok_nl "Starting 2nd/3rd instance"

#---------------------------------------------------------------

if [ "${partitionsqlfile}" ]; then
fn_echo_dots_nl "Creating table partitions"

fn_failcheck roachprod run $CLUSTER:$client1 <<EOF
./cockroach sql --insecure --database roach_bank --host=`roachprod ip $CLUSTER:1` < ${partitionsqlfile}
EOF

fn_echo_ok_nl "Creating table partitions"
else
fn_echo_info_nl "Skipping table partitions"
fi

#---------------------------------------------------------------

fn_echo_info_nl "Example commands:"
fn_echo_info_nl "  roachprod run $CLUSTER:$client1"
fn_echo_info_nl "  roachprod run $CLUSTER:$client2"
fn_echo_info_nl "  roachprod run $CLUSTER:$client3"
fn_echo_complete_nl "See docs for further guidance"

exit 0